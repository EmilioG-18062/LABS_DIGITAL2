

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 06 21:19:40 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206                           
   207                           	psect	idataCOMMON
   208  0723                     __pidataCOMMON:
   209                           
   210                           ;initializer for _button2_state
   211  0723  3401               	retlw	1
   212                           
   213                           ;initializer for _button1_state
   214  0724  3401               	retlw	1
   215                           
   216                           ;initializer for _J2_Count
   217  0725  3401               	retlw	1
   218                           
   219                           ;initializer for _J1_Count
   220  0726  3401               	retlw	1
   221  0005                     _PORTAbits	set	5
   222  0006                     _PORTBbits	set	6
   223  0009                     _PORTEbits	set	9
   224  0009                     _PORTE	set	9
   225  0008                     _PORTD	set	8
   226  0007                     _PORTC	set	7
   227  0006                     _PORTB	set	6
   228  0005                     _PORTA	set	5
   229  0089                     _TRISE	set	137
   230  0088                     _TRISD	set	136
   231  0087                     _TRISC	set	135
   232  0086                     _TRISB	set	134
   233  0085                     _TRISA	set	133
   234  0189                     _ANSELH	set	393
   235  0188                     _ANSEL	set	392
   236                           
   237                           	psect	cinit
   238  07E3                     start_initialization:	
   239                           ; #config settings
   240                           
   241  07E3                     __initialization:
   242                           
   243                           ; Initialize objects allocated to COMMON
   244  07E3  120A  118A  2723  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   245  07E8  00F5               	movwf	__pdataCOMMON& (0+127)
   246  07E9  120A  118A  2724  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   247  07EE  00F6               	movwf	(__pdataCOMMON+1)& (0+127)
   248  07EF  120A  118A  2725  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   249  07F4  00F7               	movwf	(__pdataCOMMON+2)& (0+127)
   250  07F5  120A  118A  2726  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   251  07FA  00F8               	movwf	(__pdataCOMMON+3)& (0+127)
   252                           
   253                           ; Clear objects allocated to COMMON
   254  07FB  01F9               	clrf	__pbssCOMMON& (0+127)
   255  07FC                     end_of_initialization:	
   256                           ;End of C runtime variable initialization code
   257                           
   258  07FC                     __end_of__initialization:
   259  07FC  0183               	clrf	3
   260  07FD  120A  118A  2F81   	ljmp	_main	;jump to C main() function
   261                           
   262                           	psect	bssCOMMON
   263  0079                     __pbssCOMMON:
   264  0079                     _game:
   265  0079                     	ds	1
   266                           
   267                           	psect	dataCOMMON
   268  0075                     __pdataCOMMON:
   269  0075                     _button2_state:
   270  0075                     	ds	1
   271  0076                     _button1_state:
   272  0076                     	ds	1
   273  0077                     _J2_Count:
   274  0077                     	ds	1
   275  0078                     _J1_Count:
   276  0078                     	ds	1
   277                           
   278                           	psect	cstackCOMMON
   279  0070                     __pcstackCOMMON:
   280  0070                     ?_setup:
   281  0070                     ??_setup:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_semaforo:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ??_semaforo:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_reset:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ??_reset:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_main:	
   297                           ; 1 bytes @ 0x0
   298                           
   299                           
   300                           ; 1 bytes @ 0x0
   301  0070                     	ds	3
   302  0073                     ??_main:
   303                           
   304                           ; 1 bytes @ 0x3
   305  0073                     	ds	2
   306                           
   307                           	psect	maintext
   308  0781                     __pmaintext:	
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 102 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, status,0, pclath, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : B00/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   328 ;;      Params:         0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0
   330 ;;      Temps:          2       0       0       0       0
   331 ;;      Totals:         2       0       0       0       0
   332 ;;Total ram usage:        2 bytes
   333 ;; Hardware stack levels required when called:    1
   334 ;; This function calls:
   335 ;;		_reset
   336 ;;		_semaforo
   337 ;;		_setup
   338 ;; This function is called by:
   339 ;;		Startup code after reset
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           
   344                           ;psect for function _main
   345  0781                     _main:
   346  0781                     l704:	
   347                           ;incstack = 0
   348                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   349                           
   350                           
   351                           ;main.c: 103:     setup();
   352  0781  120A  118A  2733  120A  118A  	fcall	_setup
   353  0786                     l706:
   354                           
   355                           ;main.c: 105:         if (PORTAbits.RA2 == 0){
   356  0786  1283               	bcf	3,5	;RP0=0, select bank0
   357  0787  1303               	bcf	3,6	;RP1=0, select bank0
   358  0788  1905               	btfsc	5,2	;volatile
   359  0789  2F8B               	goto	u11
   360  078A  2F8C               	goto	u10
   361  078B                     u11:
   362  078B  2F97               	goto	l712
   363  078C                     u10:
   364  078C                     l708:
   365                           
   366                           ;main.c: 106:             reset();
   367  078C  120A  118A  2727  120A  118A  	fcall	_reset
   368  0791                     l710:
   369                           
   370                           ;main.c: 107:             semaforo();
   371  0791  120A  118A  2759  120A  118A  	fcall	_semaforo
   372                           
   373                           ;main.c: 108:         }
   374  0796  2FDA               	goto	l744
   375  0797                     l712:
   376                           
   377                           ;main.c: 110:             _delay((unsigned long)((50)*(8000000/4000.0)));
   378  0797  3082               	movlw	130
   379  0798  00F4               	movwf	??_main+1
   380  0799  30DD               	movlw	221
   381  079A  00F3               	movwf	??_main
   382  079B                     u97:
   383  079B  0BF3               	decfsz	??_main,f
   384  079C  2F9B               	goto	u97
   385  079D  0BF4               	decfsz	??_main+1,f
   386  079E  2F9B               	goto	u97
   387  079F  2FA0               	nop2
   388  07A0  2FDA               	goto	l744
   389  07A1                     l714:
   390                           
   391                           ;main.c: 113:             _delay((unsigned long)((50)*(8000000/4000.0)));
   392  07A1  3082               	movlw	130
   393  07A2  00F4               	movwf	??_main+1
   394  07A3  30DD               	movlw	221
   395  07A4  00F3               	movwf	??_main
   396  07A5                     u107:
   397  07A5  0BF3               	decfsz	??_main,f
   398  07A6  2FA5               	goto	u107
   399  07A7  0BF4               	decfsz	??_main+1,f
   400  07A8  2FA5               	goto	u107
   401  07A9  2FAA               	nop2
   402  07AA                     l716:
   403                           
   404                           ;main.c: 114:             if (PORTAbits.RA0 == 0){
   405  07AA  1283               	bcf	3,5	;RP0=0, select bank0
   406  07AB  1303               	bcf	3,6	;RP1=0, select bank0
   407  07AC  1805               	btfsc	5,0	;volatile
   408  07AD  2FAF               	goto	u21
   409  07AE  2FB0               	goto	u20
   410  07AF                     u21:
   411  07AF  2FC3               	goto	l730
   412  07B0                     u20:
   413  07B0                     l718:
   414                           
   415                           ;main.c: 115:                 if (PORTAbits.RA0 == 1){
   416  07B0  1C05               	btfss	5,0	;volatile
   417  07B1  2FB3               	goto	u31
   418  07B2  2FB4               	goto	u30
   419  07B3                     u31:
   420  07B3  2FC3               	goto	l730
   421  07B4                     u30:
   422  07B4                     l720:
   423                           
   424                           ;main.c: 116:                     if(J1_Count == 0){
   425  07B4  0878               	movf	_J1_Count,w
   426  07B5  1D03               	btfss	3,2
   427  07B6  2FB8               	goto	u41
   428  07B7  2FB9               	goto	u40
   429  07B8                     u41:
   430  07B8  2FBB               	goto	l726
   431  07B9                     u40:
   432  07B9                     l722:
   433                           
   434                           ;main.c: 117:                         PORTBbits.RB0 = 1;
   435  07B9  1406               	bsf	6,0	;volatile
   436  07BA                     l724:
   437                           
   438                           ;main.c: 118:                         game = 0;
   439  07BA  01F9               	clrf	_game
   440  07BB                     l726:
   441                           
   442                           ;main.c: 120:                     PORTC = J1_Count;
   443  07BB  0878               	movf	_J1_Count,w
   444  07BC  0087               	movwf	7	;volatile
   445  07BD                     l728:
   446                           
   447                           ;main.c: 121:                     J1_Count = J1_Count*2;
   448  07BD  0878               	movf	_J1_Count,w
   449  07BE  00F3               	movwf	??_main
   450  07BF  0773               	addwf	??_main,w
   451  07C0  00F4               	movwf	??_main+1
   452  07C1  0874               	movf	??_main+1,w
   453  07C2  00F8               	movwf	_J1_Count
   454  07C3                     l730:
   455                           
   456                           ;main.c: 124:             if (PORTAbits.RA1 == 0){
   457  07C3  1885               	btfsc	5,1	;volatile
   458  07C4  2FC6               	goto	u51
   459  07C5  2FC7               	goto	u50
   460  07C6                     u51:
   461  07C6  2FDA               	goto	l744
   462  07C7                     u50:
   463  07C7                     l732:
   464                           
   465                           ;main.c: 125:                 if (PORTAbits.RA1 == 1){
   466  07C7  1C85               	btfss	5,1	;volatile
   467  07C8  2FCA               	goto	u61
   468  07C9  2FCB               	goto	u60
   469  07CA                     u61:
   470  07CA  2FDA               	goto	l744
   471  07CB                     u60:
   472  07CB                     l734:
   473                           
   474                           ;main.c: 126:                     if(J2_Count == 0){
   475  07CB  0877               	movf	_J2_Count,w
   476  07CC  1D03               	btfss	3,2
   477  07CD  2FCF               	goto	u71
   478  07CE  2FD0               	goto	u70
   479  07CF                     u71:
   480  07CF  2FD2               	goto	l740
   481  07D0                     u70:
   482  07D0                     l736:
   483                           
   484                           ;main.c: 127:                         PORTBbits.RB1 = 1;
   485  07D0  1486               	bsf	6,1	;volatile
   486  07D1                     l738:
   487                           
   488                           ;main.c: 128:                         game = 0;
   489  07D1  01F9               	clrf	_game
   490  07D2                     l740:
   491                           
   492                           ;main.c: 130:                     PORTD = J2_Count;
   493  07D2  0877               	movf	_J2_Count,w
   494  07D3  0088               	movwf	8	;volatile
   495  07D4                     l742:
   496                           
   497                           ;main.c: 131:                     J2_Count = J2_Count*2;
   498  07D4  0877               	movf	_J2_Count,w
   499  07D5  00F3               	movwf	??_main
   500  07D6  0773               	addwf	??_main,w
   501  07D7  00F4               	movwf	??_main+1
   502  07D8  0874               	movf	??_main+1,w
   503  07D9  00F7               	movwf	_J2_Count
   504  07DA                     l744:
   505                           
   506                           ;main.c: 112:         while(game == 1){
   507  07DA  0379               	decf	_game,w
   508  07DB  1903               	btfsc	3,2
   509  07DC  2FDE               	goto	u81
   510  07DD  2FDF               	goto	u80
   511  07DE                     u81:
   512  07DE  2FA1               	goto	l714
   513  07DF                     u80:
   514  07DF  2F86               	goto	l706
   515  07E0  120A  118A  2800   	ljmp	start
   516  07E3                     __end_of_main:
   517                           
   518                           	psect	text1
   519  0733                     __ptext1:	
   520 ;; *************** function _setup *****************
   521 ;; Defined at:
   522 ;;		line 54 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, status,2
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   536 ;;      Params:         0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _setup
   551  0733                     _setup:
   552  0733                     l662:	
   553                           ;incstack = 0
   554                           ; Regs used in _setup: [wreg+status,2]
   555                           
   556                           
   557                           ;main.c: 56:     ANSEL = 0;
   558  0733  1683               	bsf	3,5	;RP0=1, select bank3
   559  0734  1703               	bsf	3,6	;RP1=1, select bank3
   560  0735  0188               	clrf	8	;volatile
   561  0736                     l664:
   562                           
   563                           ;main.c: 57:     TRISA = 0b00000111;
   564  0736  3007               	movlw	7
   565  0737  1683               	bsf	3,5	;RP0=1, select bank1
   566  0738  1303               	bcf	3,6	;RP1=0, select bank1
   567  0739  0085               	movwf	5	;volatile
   568  073A                     l666:
   569                           
   570                           ;main.c: 58:     PORTA = 0;
   571  073A  1283               	bcf	3,5	;RP0=0, select bank0
   572  073B  1303               	bcf	3,6	;RP1=0, select bank0
   573  073C  0185               	clrf	5	;volatile
   574  073D                     l668:
   575                           
   576                           ;main.c: 61:     ANSELH = 0;
   577  073D  1683               	bsf	3,5	;RP0=1, select bank3
   578  073E  1703               	bsf	3,6	;RP1=1, select bank3
   579  073F  0189               	clrf	9	;volatile
   580  0740                     l670:
   581                           
   582                           ;main.c: 62:     TRISB = 0;
   583  0740  1683               	bsf	3,5	;RP0=1, select bank1
   584  0741  1303               	bcf	3,6	;RP1=0, select bank1
   585  0742  0186               	clrf	6	;volatile
   586  0743                     l672:
   587                           
   588                           ;main.c: 63:     PORTB = 0;
   589  0743  1283               	bcf	3,5	;RP0=0, select bank0
   590  0744  1303               	bcf	3,6	;RP1=0, select bank0
   591  0745  0186               	clrf	6	;volatile
   592  0746                     l674:
   593                           
   594                           ;main.c: 65:     TRISC = 0;
   595  0746  1683               	bsf	3,5	;RP0=1, select bank1
   596  0747  1303               	bcf	3,6	;RP1=0, select bank1
   597  0748  0187               	clrf	7	;volatile
   598  0749                     l676:
   599                           
   600                           ;main.c: 66:     PORTC = 0;
   601  0749  1283               	bcf	3,5	;RP0=0, select bank0
   602  074A  1303               	bcf	3,6	;RP1=0, select bank0
   603  074B  0187               	clrf	7	;volatile
   604  074C                     l678:
   605                           
   606                           ;main.c: 68:     TRISD = 0;
   607  074C  1683               	bsf	3,5	;RP0=1, select bank1
   608  074D  1303               	bcf	3,6	;RP1=0, select bank1
   609  074E  0188               	clrf	8	;volatile
   610  074F                     l680:
   611                           
   612                           ;main.c: 69:     PORTD = 0;
   613  074F  1283               	bcf	3,5	;RP0=0, select bank0
   614  0750  1303               	bcf	3,6	;RP1=0, select bank0
   615  0751  0188               	clrf	8	;volatile
   616  0752                     l682:
   617                           
   618                           ;main.c: 71:     TRISE = 0;
   619  0752  1683               	bsf	3,5	;RP0=1, select bank1
   620  0753  1303               	bcf	3,6	;RP1=0, select bank1
   621  0754  0189               	clrf	9	;volatile
   622  0755                     l684:
   623                           
   624                           ;main.c: 72:     PORTE = 0;
   625  0755  1283               	bcf	3,5	;RP0=0, select bank0
   626  0756  1303               	bcf	3,6	;RP1=0, select bank0
   627  0757  0189               	clrf	9	;volatile
   628  0758                     l45:
   629  0758  0008               	return
   630  0759                     __end_of_setup:
   631                           
   632                           	psect	text2
   633  0759                     __ptext2:	
   634 ;; *************** function _semaforo *****************
   635 ;; Defined at:
   636 ;;		line 75 in file "main.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   650 ;;      Params:         0       0       0       0       0
   651 ;;      Locals:         0       0       0       0       0
   652 ;;      Temps:          3       0       0       0       0
   653 ;;      Totals:         3       0       0       0       0
   654 ;;Total ram usage:        3 bytes
   655 ;; Hardware stack levels used:    1
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           
   664                           ;psect for function _semaforo
   665  0759                     _semaforo:
   666  0759                     l686:	
   667                           ;incstack = 0
   668                           ; Regs used in _semaforo: [wreg]
   669                           
   670                           
   671                           ;main.c: 76:     PORTEbits.RE0 = 1;
   672  0759  1283               	bcf	3,5	;RP0=0, select bank0
   673  075A  1303               	bcf	3,6	;RP1=0, select bank0
   674  075B  1409               	bsf	9,0	;volatile
   675  075C                     l688:
   676                           
   677                           ;main.c: 77:     _delay((unsigned long)((100)*(8000000/4000.0)));
   678  075C  3002               	movlw	2
   679  075D  00F2               	movwf	??_semaforo+2
   680  075E  3004               	movlw	4
   681  075F  00F1               	movwf	??_semaforo+1
   682  0760  30BA               	movlw	186
   683  0761  00F0               	movwf	??_semaforo
   684  0762                     u117:
   685  0762  0BF0               	decfsz	??_semaforo,f
   686  0763  2F62               	goto	u117
   687  0764  0BF1               	decfsz	??_semaforo+1,f
   688  0765  2F62               	goto	u117
   689  0766  0BF2               	decfsz	??_semaforo+2,f
   690  0767  2F62               	goto	u117
   691  0768  0000               	nop
   692  0769                     l690:
   693                           
   694                           ;main.c: 78:     PORTEbits.RE0 = 0;
   695  0769  1283               	bcf	3,5	;RP0=0, select bank0
   696  076A  1303               	bcf	3,6	;RP1=0, select bank0
   697  076B  1009               	bcf	9,0	;volatile
   698  076C                     l692:
   699                           
   700                           ;main.c: 80:     PORTEbits.RE1 = 1;
   701  076C  1489               	bsf	9,1	;volatile
   702                           
   703                           ;main.c: 81:     _delay((unsigned long)((100)*(8000000/4000.0)));
   704  076D  3002               	movlw	2
   705  076E  00F2               	movwf	??_semaforo+2
   706  076F  3004               	movlw	4
   707  0770  00F1               	movwf	??_semaforo+1
   708  0771  30BA               	movlw	186
   709  0772  00F0               	movwf	??_semaforo
   710  0773                     u127:
   711  0773  0BF0               	decfsz	??_semaforo,f
   712  0774  2F73               	goto	u127
   713  0775  0BF1               	decfsz	??_semaforo+1,f
   714  0776  2F73               	goto	u127
   715  0777  0BF2               	decfsz	??_semaforo+2,f
   716  0778  2F73               	goto	u127
   717  0779  0000               	nop
   718  077A                     l694:
   719                           
   720                           ;main.c: 82:     PORTEbits.RE1 = 0;
   721  077A  1283               	bcf	3,5	;RP0=0, select bank0
   722  077B  1303               	bcf	3,6	;RP1=0, select bank0
   723  077C  1089               	bcf	9,1	;volatile
   724  077D                     l696:
   725                           
   726                           ;main.c: 84:     PORTEbits.RE2 = 1;
   727  077D  1509               	bsf	9,2	;volatile
   728  077E                     l698:
   729                           
   730                           ;main.c: 85:     game = 1;
   731  077E  01F9               	clrf	_game
   732  077F  0AF9               	incf	_game,f
   733  0780                     l48:
   734  0780  0008               	return
   735  0781                     __end_of_semaforo:
   736                           
   737                           	psect	text3
   738  0727                     __ptext3:	
   739 ;; *************** function _reset *****************
   740 ;; Defined at:
   741 ;;		line 88 in file "main.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;		None
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		status,2
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   755 ;;      Params:         0       0       0       0       0
   756 ;;      Locals:         0       0       0       0       0
   757 ;;      Temps:          0       0       0       0       0
   758 ;;      Totals:         0       0       0       0       0
   759 ;;Total ram usage:        0 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           
   769                           ;psect for function _reset
   770  0727                     _reset:
   771  0727                     l700:	
   772                           ;incstack = 0
   773                           ; Regs used in _reset: [status,2]
   774                           
   775                           
   776                           ;main.c: 89:     J1_Count = 1;
   777  0727  01F8               	clrf	_J1_Count
   778  0728  0AF8               	incf	_J1_Count,f
   779                           
   780                           ;main.c: 90:     J2_Count = 1;
   781  0729  01F7               	clrf	_J2_Count
   782  072A  0AF7               	incf	_J2_Count,f
   783                           
   784                           ;main.c: 91:     PORTEbits.RE2 = 0;
   785  072B  1283               	bcf	3,5	;RP0=0, select bank0
   786  072C  1303               	bcf	3,6	;RP1=0, select bank0
   787  072D  1109               	bcf	9,2	;volatile
   788                           
   789                           ;main.c: 92:     PORTBbits.RB0 = 0;
   790  072E  1006               	bcf	6,0	;volatile
   791                           
   792                           ;main.c: 93:     PORTBbits.RB1 = 0;
   793  072F  1086               	bcf	6,1	;volatile
   794  0730                     l702:
   795                           
   796                           ;main.c: 94:     PORTC = 0;
   797  0730  0187               	clrf	7	;volatile
   798                           
   799                           ;main.c: 95:     PORTD = 0;
   800  0731  0188               	clrf	8	;volatile
   801  0732                     l51:
   802  0732  0008               	return
   803  0733                     __end_of_reset:
   804  007E                     btemp	set	126	;btemp
   805  007E                     wtemp0	set	126
   806                           
   807                           	psect	config
   808                           
   809                           ;Config register CONFIG1 @ 0x2007
   810                           ;	Oscillator Selection bits
   811                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
   812                           ;	Watchdog Timer Enable bit
   813                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   814                           ;	Power-up Timer Enable bit
   815                           ;	PWRTE = OFF, PWRT disabled
   816                           ;	RE3/MCLR pin function select bit
   817                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   818                           ;	Code Protection bit
   819                           ;	CP = OFF, Program memory code protection is disabled
   820                           ;	Data Code Protection bit
   821                           ;	CPD = OFF, Data memory code protection is disabled
   822                           ;	Brown Out Reset Selection bits
   823                           ;	BOREN = OFF, BOR disabled
   824                           ;	Internal External Switchover bit
   825                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   826                           ;	Fail-Safe Clock Monitor Enabled bit
   827                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   828                           ;	Low Voltage Programming Enable bit
   829                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   830                           ;	In-Circuit Debugger Mode bit
   831                           ;	DEBUG = 0x1, unprogrammed default
   832  2007                     	org	8199
   833  2007  20F1               	dw	8433
   834                           
   835                           ;Config register CONFIG2 @ 0x2008
   836                           ;	Brown-out Reset Selection bit
   837                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   838                           ;	Flash Program Memory Self Write Enable bits
   839                           ;	WRT = OFF, Write protection off
   840  2008                     	org	8200
   841  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_semaforo

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              3 COMMON     2     2      0
                              _reset
                           _semaforo
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _semaforo                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _reset
   _semaforo
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       A      12        0.0%
ABS                  0      0       A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 06 21:19:40 2021

                     l51 0732                       l45 0758                       l48 0780  
                     u10 078C                       u11 078B                       u20 07B0  
                     u21 07AF                       u30 07B4                       u31 07B3  
                     u40 07B9                       u41 07B8                       u50 07C7  
                     u51 07C6                       u60 07CB                       u61 07CA  
                     u70 07D0                       u71 07CF                       u80 07DF  
                     u81 07DE                       u97 079B                      l700 0727  
                    l702 0730                      l710 0791                      l720 07B4  
                    l712 0797                      l704 0781                      l722 07B9  
                    l730 07C3                      l714 07A1                      l706 0786  
                    l740 07D2                      l732 07C7                      l724 07BA  
                    l716 07AA                      l708 078C                      l670 0740  
                    l662 0733                      l742 07D4                      l734 07CB  
                    l726 07BB                      l718 07B0                      l680 074F  
                    l672 0743                      l664 0736                      l736 07D0  
                    l728 07BD                      l744 07DA                      l690 0769  
                    l682 0752                      l674 0746                      l666 073A  
                    l738 07D1                      l692 076C                      l684 0755  
                    l676 0749                      l668 073D                      l694 077A  
                    l686 0759                      l678 074C                      l696 077D  
                    l688 075C                      l698 077E                      u107 07A5  
                    u117 0762                      u127 0773                     _game 0079  
                   _main 0781                     btemp 007E                     start 0000  
                  ?_main 0070                    _ANSEL 0188                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _PORTE 0009                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _reset 0727                    _setup 0733                    status 0003  
                  wtemp0 007E          __initialization 07E3             __end_of_main 07E3  
                 ??_main 0073                   ?_reset 0070                   ?_setup 0070  
                 _ANSELH 0189         __end_of_semaforo 0781             __pdataCOMMON 0075  
__end_of__initialization 07FC           __pcstackCOMMON 0070            _button1_state 0076  
          _button2_state 0075            __end_of_reset 0733            __end_of_setup 0759  
                ??_reset 0070                  ??_setup 0070               __pmaintext 0781  
              ?_semaforo 0070                  __ptext1 0733                  __ptext2 0759  
                __ptext3 0727     end_of_initialization 07FC               ??_semaforo 0070  
              _PORTAbits 0005                _PORTBbits 0006                _PORTEbits 0009  
          __pidataCOMMON 0723      start_initialization 07E3              __pbssCOMMON 0079  
              ___latbits 0002        __size_of_semaforo 0028                 _J1_Count 0078  
               _J2_Count 0077           __size_of_reset 000C           __size_of_setup 0026  
          __size_of_main 0062                 _semaforo 0759  
